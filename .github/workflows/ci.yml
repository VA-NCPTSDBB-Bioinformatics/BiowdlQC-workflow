name: Continuous integration

on: 
  pull_request:
    paths:
      - "**.wdl"  # Workflow files and task 
      - "**.yml"  # Ci configuration, tests and docker images 
      - "!docs/**"

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Womtool validate and submodule up to date.
    steps:
      - name: install miniconda
        run: |
          export MINICONDA=$HOME/miniconda
          export PATH=$/miniconda/
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -f -p ${MINICONDA} 
          conda config --set always_yes yes
          conda config --add channels defaults
          conda config --add channels bioconda
          conda config --add channels conda-forge
      - name: install requirements
        run: conda install cromwell miniwdl wdl-aid
      - name: run linting
        run: bash scripts/biowdl_lint.sh
  test:
    runs-on: ubuntu-latest
    matrix:
      test: [
        "paired_end_zipped",
        "paired_end",
        "single_end_zipped",
        "single_end_zipped_contaminations",
        "single_end"
      ]
    steps:
      - name: install miniconda
        run: |
          export MINICONDA=$HOME/miniconda
          export PATH=$/miniconda/
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -f -p ${MINICONDA} 
          conda config --set always_yes yes
          conda config --add channels defaults
          conda config --add channels bioconda
          conda config --add channels conda-forge
      - name: install requirements
        run: conda install  --file requirements-test.txt
      - name: Run test
        run: pytest --keep-workflow-wd-on-fail --tag ${{ matrix.test }} tests/
      - name: Check logs in case of failure
        if: ${{ failure() }}
        # Get the last 1000 lines of the cromwell log to catch the error.
        run: bash -c 'tail -n 1000 /tmp/pytest_workflow_*/*/log.out'
    